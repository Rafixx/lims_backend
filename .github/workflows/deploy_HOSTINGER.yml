name: Deploy LIMS Backend to Hostinger

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    environment: HOSTINGER

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Create deployment package
        run: |
          mkdir -p deploy_package
          cp -r dist deploy_package/
          cp package*.json deploy_package/
          cp ecosystem.config.js deploy_package/
          tar -czf deploy.tar.gz -C deploy_package .

      - name: Test SSH Connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          password: ${{ secrets.HOSTINGER_PASSWORD }}
          script: |
            echo "Testing SSH connection..."
            echo "Current directory: $(pwd)"
            echo "Node version: $(node --version || echo 'Node not found')"
            echo "PM2 version: $(pm2 --version || echo 'PM2 not found')"

      - name: Copy deployment package to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          password: ${{ secrets.HOSTINGER_PASSWORD }}
          source: 'deploy.tar.gz'
          target: '/home/rafa/deploy/epidisease/lims/'
          strip_components: 0
          rm: false

      - name: Deploy to Hostinger with PM2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          password: ${{ secrets.HOSTINGER_PASSWORD }}
          script: |
            set -e

            # Variables
            DEPLOY_DIR="/home/rafa/dev/epidisease/lims/lims_backend"
            LOGS_DIR="/home/rafa/dev/epidisease/lims/logs"
            BACKUP_DIR="/home/rafa/dev/epidisease/lims/backups/lims_backend"
            DEPLOY_PACKAGE="/home/rafa/deploy/epidisease/lims/deploy.tar.gz"
            DATE=$(date +%Y%m%d_%H%M%S)

            echo "=========================================="
            echo "üöÄ Starting LIMS Backend Deployment"
            echo "=========================================="
            echo "Time: $(date)"
            echo "User: $(whoami)"
            echo ""

            # Verificar Node.js y PM2
            echo "üìã Checking prerequisites..."
            if ! command -v node &> /dev/null; then
              echo "‚ùå Error: Node.js not found"
              exit 1
            fi
            echo "‚úÖ Node.js version: $(node --version)"

            if ! command -v pm2 &> /dev/null; then
              echo "‚ö†Ô∏è  PM2 not found, installing..."
              npm install -g pm2
            fi
            echo "‚úÖ PM2 version: $(pm2 --version)"
            echo ""

            # Crear directorios necesarios
            echo "üìÅ Creating directories..."
            mkdir -p "$DEPLOY_DIR"
            mkdir -p "$LOGS_DIR"
            mkdir -p "$BACKUP_DIR"
            echo "‚úÖ Directories ready"
            echo ""

            # Backup de la versi√≥n actual (solo si existe dist)
            if [ -d "$DEPLOY_DIR/dist" ]; then
              echo "üíæ Creating backup..."
              BACKUP_PATH="$BACKUP_DIR/backup_$DATE"
              mkdir -p "$BACKUP_PATH"
              cp -r "$DEPLOY_DIR/dist" "$BACKUP_PATH/" 2>/dev/null || echo "‚ö†Ô∏è  No dist to backup"
              cp "$DEPLOY_DIR/package.json" "$BACKUP_PATH/" 2>/dev/null || echo "‚ö†Ô∏è  No package.json to backup"
              echo "‚úÖ Backup created at: $BACKUP_PATH"
              
              # Mantener solo los √∫ltimos 5 backups
              cd "$BACKUP_DIR"
              ls -dt backup_* 2>/dev/null | tail -n +6 | xargs -r rm -rf
              echo "‚úÖ Old backups cleaned (keeping last 5)"
            else
              echo "‚ÑπÔ∏è  No previous deployment found, skipping backup"
            fi
            echo ""

            # Extraer el paquete de deployment
            echo "üì¶ Extracting deployment package..."
            cd "$DEPLOY_DIR"
            tar -xzf "$DEPLOY_PACKAGE"
            echo "‚úÖ Package extracted"
            echo ""

            # Verificar que existe el archivo .env
            if [ ! -f "$DEPLOY_DIR/.env" ]; then
              echo "‚ö†Ô∏è  Warning: .env file not found!"
              echo "‚ÑπÔ∏è  Please create .env file with production configuration manually on the server"
              echo "‚ÑπÔ∏è  Required variables: DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME, DB_SCHEMA, JWT_SECRET, PORT"
              echo ""
            else
              echo "‚úÖ .env file found"
              echo ""
            fi

            # Instalar dependencias de producci√≥n
            echo "üì• Installing production dependencies..."
            npm ci --only=production
            echo "‚úÖ Dependencies installed"
            echo ""

            # Verificar que existe el build
            if [ ! -d "$DEPLOY_DIR/dist" ]; then
              echo "‚ùå Error: dist directory not found in deployment package"
              exit 1
            fi
            echo "‚úÖ Build files verified"
            echo ""

            # Desplegar con PM2
            echo "üîÑ Deploying with PM2..."
            cd "$DEPLOY_DIR"

            # Verificar si el proceso ya existe
            if pm2 describe lims-backend > /dev/null 2>&1; then
              echo "‚ôªÔ∏è  Reloading existing PM2 process (zero-downtime)..."
              pm2 reload ecosystem.config.js --env production
              echo "‚úÖ Process reloaded"
            else
              echo "üÜï Starting new PM2 process..."
              pm2 start ecosystem.config.js --env production
              pm2 save
              echo "‚úÖ Process started"
            fi
            echo ""

            # Configurar PM2 para iniciar en boot (solo si no est√° configurado)
            if ! pm2 startup | grep -q "already"; then
              echo "‚öôÔ∏è  Configuring PM2 startup..."
              pm2 startup systemd -u root --hp /root
              pm2 save
              echo "‚úÖ PM2 startup configured"
            fi
            echo ""

            # Mostrar estado
            echo "üìä Current PM2 Status:"
            pm2 list
            echo ""

            # Mostrar logs recientes
            echo "üìã Recent logs (last 20 lines):"
            pm2 logs lims-backend --lines 20 --nostream
            echo ""

            # Limpiar archivo temporal
            rm -f "$DEPLOY_PACKAGE"

            echo "=========================================="
            echo "‚úÖ Deployment completed successfully!"
            echo "=========================================="
            echo "Time: $(date)"
            echo ""
            echo "üìç Useful commands:"
            echo "  - View logs: pm2 logs lims-backend"
            echo "  - Check status: pm2 status"
            echo "  - Restart: pm2 restart lims-backend"
            echo "  - Stop: pm2 stop lims-backend"
            echo ""
            echo "üìÅ Locations:"
            echo "  - App: $DEPLOY_DIR"
            echo "  - Logs: $LOGS_DIR"
            echo "  - Backups: $BACKUP_DIR"
            echo ""
